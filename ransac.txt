\section{RANSAC算法}
RANSAC（随机抽样一致性，\textit{Random Sample Consensus}）算法由 Fischler 和 Bolles 于 1981 年提出，是一种在含有大量异常值数据的环境下进行模型参数估计的鲁棒算法。该算法通过反复随机抽取数据子集并拟合模型，从带有噪声和离群点（外点）的观测数据中筛选出与模型一致的内点，从而实现对异常值的剔除。RANSAC 在计算机视觉领域得到了广泛应用，例如用于估计两幅图像间的单应矩阵、基础矩阵和平面模型等。在本课题中，我们将其应用于相机姿态（位姿）求解，以提高位姿估计对匹配点集合中可能存在的错误匹配（离群点）的鲁棒性。

RANSAC 算法的基本思路是反复进行"随机采样"和"模型评估"两个阶段，直至找到满意的模型估计。其具体流程包括：
\begin{enumerate}
	\item 从数据集中随机选取最少数量的样本点来拟合模型。在相机位姿求解的 PnP 问题中，由于求解位姿至少需要 4 对点对应（即 \texttt{MIN\_POINTS\_COUNT} = 4），因此每次随机采样从所有匹配点中选择 4 对对应点。
	\item 使用选取的样本点计算模型参数。例如，对于 PnP 问题，利用这 4 对 3D-2D 对应点计算相机姿态（旋转向量 $\mathbf{r}$ 和平移向量 $\mathbf{t}$）。
	\item 将模型应用于全部数据，计算每个样本点的误差并判断其是否符合该模型。对于 PnP 而言，可将 3D 点通过估计的姿态投影到图像平面，与实际 2D 观测点比较来计算重投影误差。若误差小于预设阈值，则该点视为内点；否则视为外点。
	\item 统计内点数量，并与当前最佳模型的内点数量进行比较。若当前模型的内点数多于先前最佳模型，则将当前模型视为新的最佳模型，并记录对应的内点集合。
	\item 如果当前模型的内点数达到预先设定的阈值（例如超过一定比例或绝对数量），则认为找到了足够好的模型，可提前终止迭代。否则，重复以上随机采样与评估过程。
\end{enumerate}
上述过程将执行预定的最大迭代次数或在满足终止条件时结束。算法结束时，会选择内点最多的模型作为最终结果，并可使用该模型对应的所有内点重新估计模型参数以进一步提高精度（例如对相机姿态再执行一次整体优化）。图\ref{fig:ransac_flow}展示了 RANSAC 算法的流程示意图。

OpenCV 提供了 \texttt{cv::solvePnPRansac} 函数来实现基于 RANSAC 的 PnP 求解。该函数内部结合了上述 RANSAC 随机抽样一致性策略，以提高位姿估计对误匹配点的鲁棒性。函数接口中与 RANSAC 有关的关键参数如下表所示：

\begin{table}[htbp]\centering
	\caption{RANSAC 算法关键参数及说明}
	\label{tab:ransac_params}
	\begin{tabular}{l p{9cm} l}
		\hline
		\textbf{参数名称} & \textbf{含义} & \textbf{默认值}\\
		\hline
		\texttt{iterationsCount} & RANSAC 算法的最大迭代次数。值越大，算法尝试随机模型的次数越多，找到正确模型的概率越高，但计算开销也随之增加。 & 100 \\
		\texttt{reprojectionError} & 判定内点的重投影误差阈值（以像素为单位）。当一个观测点在估计模型下的重投影误差小于该阈值时，被认定为内点。阈值越小，内点判定越严格。 & 8.0 \\
		\texttt{minInliersCount} & 提前终止迭代所需的最少内点数。当找到一个模型的内点数达到此值时，算法认为模型足够可靠，可以提前结束迭代。若设为 0 或未指定，则默认取全部样本点数量，表示不启用提前终止条件。 & 无（默认等于所有点数） \\
		\texttt{useExtrinsicGuess} & 是否使用提供的初始外部参数估计值。若为 \texttt{true}，则以传入的初始 $\mathbf{r}, \mathbf{t}$ 作为求解起点。该选项对于使用迭代优化法（如 \texttt{SOLVEPNP\_ITERATIVE}）的方法尤为重要。 & \texttt{false} \\
		\texttt{flags} & PnP 求解所使用的算法类型标志。例如 \texttt{SOLVEPNP\_ITERATIVE}（基于 Levenberg-Marquardt 的迭代法）、\texttt{SOLVEPNP\_P3P}（解三点透视问题）、\texttt{SOLVEPNP\_EPNP}（高效 PnP）等。RANSAC 在每次迭代中将调用该指定算法来求解候选位姿。 & \texttt{SOLVEPNP\_ITERATIVE} \\
		\hline
	\end{tabular}
\end{table}

需要注意的是，在较新版的 OpenCV（如 3.2 及之后版本）中，\texttt{solvePnPRansac} 接口引入了 \texttt{confidence} 参数来取代 \texttt{minInliersCount}，用于指定算法输出正确结果的置信概率（默认 0.99），并据此自动估算所需的迭代次数\cite{openCV32}。无论采用何种参数配置，RANSAC 算法都能在一定概率下找到满足精度要求的模型，并有效剔除离群点对结果的干扰。

\begin{figure}[htbp]\centering
	\begin{tikzpicture}[node distance=14mm,>=Stealth, semithick]
		% Define styles for nodes
		\tikzstyle{startstop}=[ellipse, draw, align=center, minimum width=25mm, minimum height=8mm]
		\tikzstyle{process}=[rectangle, draw, align=center, rounded corners, minimum height=10mm, minimum width=35mm]
		\tikzstyle{decision}=[diamond, aspect=2, draw, align=center, inner sep=1pt, minimum width=30mm, minimum height=12mm]
		% Nodes
		\node[startstop] (start) {开始};
		\node[process, below of=start] (init) {参数初始化\\(迭代次数=0)};
		\node[process, below of=init] (sample) {随机选择最小样本\\(4 对对应点)};
		\node[process, below of=sample] (model) {计算候选位姿\\(解 PnP)};
		\node[process, below of=model] (evaluate) {计算误差并统计\\内点数量};
		\node[decision, below of=evaluate, yshift=-3mm, text width=30mm] (better) {内点数是否\\超过当前最佳?};
		\node[process, right of=better, xshift=25mm] (update) {更新最佳模型\\及内点集};
		\node[decision, below of=better, yshift=-15mm, text width=34mm] (stop) {是否满足终止条件?};
		\node[startstop, below of=stop, yshift=-3mm] (end) {结束\\输出结果};
		% Coordinate for loop arrow
		\coordinate (loop) at ($(sample.north)+(-20mm,0)$);
		% Connections and arrows
		\draw[->] (start) -- (init);
		\draw[->] (init) -- (sample);
		\draw[->] (sample) -- (model);
		\draw[->] (model) -- (evaluate);
		\draw[->] (evaluate) -- (better);
		\draw[->] (better) -- node[above] {是} (update);
		\draw[->] (better) -- node[left] {否} (stop);
		\draw[->] (update) |- (stop);
		\draw[->] (stop.west) node[above, xshift=-2mm]{否} -| (loop) -- (sample.north);
		\draw[->] (stop) -- node[right] {是} (end);
	\end{tikzpicture}
	\caption{RANSAC 算法流程图}
	\label{fig:ransac_flow}
\end{figure}
